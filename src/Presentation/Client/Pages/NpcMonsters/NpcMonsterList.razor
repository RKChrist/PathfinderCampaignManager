@page "/npc-monsters"
@page "/sessions/{sessionId:guid}/npc-monsters"
@using PathfinderCampaignManager.Domain.Enums
@using PathfinderCampaignManager.Presentation.Client.Components.Auth
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime

<PageTitle>NPC/Monster Library</PageTitle>

<AuthGuard CustomMessage="You must be logged in to access DM tools and NPC/Monster library." RedirectToLogin="true">

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>
                <i class="fas fa-dragon me-2"></i>
                @if (SessionId.HasValue)
                {
                    <text>Session NPC/Monsters</text>
                }
                else
                {
                    <text>NPC/Monster Library</text>
                }
            </h2>
            @if (npcMonsters != null)
            {
                <p class="text-muted">@npcMonsters.Count() entries found</p>
            }
        </div>
        <div>
            <a href="@GetCreateUrl()" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i>
                Create New
            </a>
            @if (SessionId.HasValue)
            {
                <a href="@($"/sessions/{SessionId}")" class="btn btn-outline-secondary ms-2">
                    <i class="fas fa-arrow-left me-1"></i>
                    Back to Session
                </a>
            }
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center p-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (npcMonsters != null)
    {
        @if (npcMonsters.Any())
        {
            <div class="row">
                @foreach (var npc in npcMonsters)
                {
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-start">
                                <div>
                                    <h5 class="card-title mb-1">@npc.Name</h5>
                                    <small class="text-muted">
                                        Level @npc.Level @npc.Type
                                        @if (npc.IsTemplate)
                                        {
                                            <span class="badge bg-info ms-1">Template</span>
                                        }
                                    </small>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                                            data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="/npc-monsters/@npc.Id">
                                            <i class="fas fa-eye me-2"></i>View Details
                                        </a></li>
                                        <li><a class="dropdown-item" href="/npc-monsters/@npc.Id/edit">
                                            <i class="fas fa-edit me-2"></i>Edit
                                        </a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><button class="dropdown-item text-danger" @onclick="() => DeleteNpcMonster(npc.Id)">
                                            <i class="fas fa-trash me-2"></i>Delete
                                        </button></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(npc.Description))
                                {
                                    <p class="card-text">
                                        @(npc.Description.Length > 100 
                                            ? npc.Description.Substring(0, 100) + "..." 
                                            : npc.Description)
                                    </p>
                                }
                                
                                <div class="row text-center">
                                    @if (npc.ArmorClass.HasValue)
                                    {
                                        <div class="col">
                                            <small class="text-muted">AC</small>
                                            <div class="fw-bold">@npc.ArmorClass</div>
                                        </div>
                                    }
                                    @if (npc.HitPoints.HasValue)
                                    {
                                        <div class="col">
                                            <small class="text-muted">HP</small>
                                            <div class="fw-bold">@npc.HitPoints</div>
                                        </div>
                                    }
                                    @if (npc.Speed.HasValue)
                                    {
                                        <div class="col">
                                            <small class="text-muted">Speed</small>
                                            <div class="fw-bold">@npc.Speed ft</div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="card-footer">
                                <small class="text-muted">
                                    Created @npc.CreatedAt.ToString("MMM dd, yyyy")
                                </small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-dragon fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No NPC/Monsters Found</h4>
                <p class="text-muted">
                    @if (SessionId.HasValue)
                    {
                        <text>This session doesn't have any NPCs or monsters yet.</text>
                    }
                    else
                    {
                        <text>Your library is empty. Create your first NPC or monster!</text>
                    }
                </p>
                <a href="@GetCreateUrl()" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i>
                    Create Your First NPC/Monster
                </a>
            </div>
        }
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle me-1"></i>
            @errorMessage
        </div>
    }
</div>

</AuthGuard>

@code {
    [Parameter] public Guid? SessionId { get; set; }

    private IEnumerable<NpcMonsterResponse>? npcMonsters;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadNpcMonsters();
    }

    private async Task LoadNpcMonsters()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            string endpoint;
            if (SessionId.HasValue)
            {
                endpoint = $"api/npcmonster/session/{SessionId}";
            }
            else
            {
                endpoint = "api/npcmonster/library";
            }

            npcMonsters = await Http.GetFromJsonAsync<IEnumerable<NpcMonsterResponse>>(endpoint);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load NPC/Monsters: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteNpcMonster(Guid id)
    {
        var d = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this NPC/Monster?");
        if (d)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/npcmonster/{id}");
                
                if (response.IsSuccessStatusCode)
                {
                    await LoadNpcMonsters(); // Reload the list
                }
                else
                {
                    errorMessage = "Failed to delete NPC/Monster";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting NPC/Monster: {ex.Message}";
            }
        }
    }

    private string GetCreateUrl()
    {
        return SessionId.HasValue ? $"/npc-monsters/create/{SessionId}" : "/npc-monsters/create";
    }

    public record NpcMonsterResponse(
        Guid Id,
        string Name,
        NpcMonsterType Type,
        int Level,
        string? Description,
        int? ArmorClass,
        int? HitPoints,
        int? Speed,
        bool IsTemplate,
        Guid? OwnerUserId,
        Guid? SessionId,
        DateTime CreatedAt,
        DateTime? UpdatedAt
    );
}