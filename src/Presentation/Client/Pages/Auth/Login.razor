@page "/login"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using System.ComponentModel.DataAnnotations

<PageTitle>Login - Pathfinder Campaign Manager</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="text-center mb-4">
            <h1 class="h3 mb-3 fw-normal">Welcome Back</h1>
            <p class="text-muted">Sign in to your Pathfinder Campaign Manager account</p>
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @_errorMessage
            </div>
        }

        @if (_isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Signing you in...</p>
            </div>
        }
        else if (_showEmailLogin)
        {
            <EditForm Model="@_loginModel" OnValidSubmit="LoginWithEmail">
                <DataAnnotationsValidator />
                
                <div class="mb-3">
                    <label for="emailOrUsername" class="form-label">Email or Username</label>
                    <InputText id="emailOrUsername" class="form-control" @bind-Value="_loginModel.EmailOrUsername" 
                               placeholder="Enter your email or username" />
                    <ValidationMessage For="@(() => _loginModel.EmailOrUsername)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" id="password" class="form-control" @bind-Value="_loginModel.Password" 
                               placeholder="Enter your password" />
                    <ValidationMessage For="@(() => _loginModel.Password)" class="text-danger" />
                </div>

                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Sign In
                    </button>
                </div>
            </EditForm>

            <div class="text-center">
                <div class="divider my-4">
                    <span class="divider-text">Or continue with</span>
                </div>
                
                <div class="d-grid mb-3">
                    <button class="btn btn-discord btn-lg" @onclick="LoginWithDiscord" disabled="@_isLoading">
                        <i class="fab fa-discord me-2"></i>
                        Continue with Discord
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="d-grid mb-3">
                <button class="btn btn-primary btn-lg" @onclick="ShowEmailLogin">
                    <i class="fas fa-envelope me-2"></i>
                    Sign in with Email
                </button>
            </div>
            
            <div class="d-grid mb-3">
                <button class="btn btn-discord btn-lg" @onclick="LoginWithDiscord" disabled="@_isLoading">
                    <i class="fab fa-discord me-2"></i>
                    Continue with Discord
                </button>
            </div>
        }

        <div class="text-center mt-4">
            @if (_showEmailLogin)
            {
                <p class="text-muted mb-2">
                    <a href="javascript:void(0)" @onclick="HideEmailLogin" class="text-decoration-none">‚Üê Back to login options</a>
                </p>
            }
            <p class="text-muted mb-0">
                Don't have an account? 
                <a href="/register" class="text-decoration-none">Create one here</a>
            </p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
    }

    .login-card {
        background: white;
        padding: 3rem;
        border-radius: 1rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .btn-primary {
        background: #5865f2;
        border-color: #5865f2;
        padding: 0.75rem 1.5rem;
    }

    .btn-primary:hover {
        background: #4752c4;
        border-color: #4752c4;
    }

    .btn-discord {
        background: #5865f2;
        border-color: #5865f2;
        color: white;
        padding: 0.75rem 1.5rem;
    }

    .btn-discord:hover {
        background: #4752c4;
        border-color: #4752c4;
        color: white;
    }

    .divider {
        position: relative;
        text-align: center;
    }

    .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #dee2e6;
    }

    .divider-text {
        background: white;
        padding: 0 1rem;
        color: #6c757d;
        font-size: 0.875rem;
    }

    .fab, .fas {
        font-family: "Font Awesome 6 Brands", "Font Awesome 6 Free";
    }
</style>

@code {
    private bool _isLoading = false;
    private bool _showEmailLogin = false;
    private string _errorMessage = string.Empty;
    private LoginModel _loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Check if we're returning from Discord OAuth
        var uri = new Uri(Navigation.Uri);
        if (uri.Query.Contains("code="))
        {
            var queryParams = uri.Query.TrimStart('?').Split('&');
            var codeParam = queryParams.FirstOrDefault(p => p.StartsWith("code="));
            if (codeParam != null)
            {
                var code = codeParam.Split('=')[1];
                await HandleDiscordCallback(code);
            }
        }
        else if (uri.Query.Contains("error"))
        {
            _errorMessage = "Discord authentication failed. Please try again.";
        }
    }

    private async Task LoginWithDiscord()
    {
        try
        {
            _isLoading = true;
            _errorMessage = string.Empty;

            var response = await Http.GetAsync("api/auth/discord-login-url");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<DiscordLoginUrlResponse>(content, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                Navigation.NavigateTo(result?.LoginUrl ?? "", forceLoad: true);
            }
            else
            {
                _errorMessage = "Failed to get Discord login URL. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleDiscordCallback(string code)
    {
        try
        {
            _isLoading = true;

            var request = new { Code = code };
            var response = await Http.PostAsJsonAsync("api/auth/discord-callback", request);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonSerializer.Deserialize<AuthResponse>(content, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                if (authResult?.Token != null)
                {
                    // Store the token (in a real app, you'd use a proper auth service)
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", authResult.Token);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userInfo", JsonSerializer.Serialize(authResult.User));
                    
                    // Redirect to campaigns page
                    Navigation.NavigateTo("/campaigns");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _errorMessage = $"Authentication failed: {error}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Authentication failed: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowEmailLogin()
    {
        _showEmailLogin = true;
        _errorMessage = string.Empty;
    }

    private void HideEmailLogin()
    {
        _showEmailLogin = false;
        _errorMessage = string.Empty;
        _loginModel = new LoginModel();
    }

    private async Task LoginWithEmail()
    {
        try
        {
            _isLoading = true;
            _errorMessage = string.Empty;

            var response = await Http.PostAsJsonAsync("api/auth/login", _loginModel);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonSerializer.Deserialize<AuthResponse>(content, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                if (authResult?.Token != null)
                {
                    // Store the token
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", authResult.Token);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userInfo", JsonSerializer.Serialize(authResult.User));
                    
                    // Redirect to campaigns page
                    Navigation.NavigateTo("/campaigns");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
                _errorMessage = errorResponse?.Error ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email or username is required")]
        public string EmailOrUsername { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class DiscordLoginUrlResponse
    {
        public string LoginUrl { get; set; } = string.Empty;
    }

    public class AuthResponse
    {
        public string Token { get; set; } = string.Empty;
        public UserInfo User { get; set; } = new();
    }

    public class UserInfo
    {
        public Guid Id { get; set; }
        public string Username { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public bool IsActive { get; set; }
    }

    public class ErrorResponse
    {
        public string Error { get; set; } = string.Empty;
    }
}