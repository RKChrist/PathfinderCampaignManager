@page "/register"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using System.ComponentModel.DataAnnotations

<PageTitle>Register - Pathfinder Campaign Manager</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="text-center mb-4">
            <h1 class="h3 mb-3 fw-normal">Create Account</h1>
            <p class="text-muted">Join the Pathfinder Campaign Manager community</p>
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @_errorMessage
            </div>
        }

        @if (_isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Creating account...</span>
                </div>
                <p class="mt-2 text-muted">Creating your account...</p>
            </div>
        }
        else
        {
            <EditForm Model="@_registerModel" OnValidSubmit="RegisterUser">
                <DataAnnotationsValidator />
                
                <div class="mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" class="form-control" @bind-Value="_registerModel.Email" 
                               placeholder="Enter your email" />
                    <ValidationMessage For="@(() => _registerModel.Email)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="_registerModel.Username" 
                               placeholder="Choose a username" />
                    <ValidationMessage For="@(() => _registerModel.Username)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="displayName" class="form-label">Display Name</label>
                    <InputText id="displayName" class="form-control" @bind-Value="_registerModel.DisplayName" 
                               placeholder="How others will see you" />
                    <ValidationMessage For="@(() => _registerModel.DisplayName)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" id="password" class="form-control" @bind-Value="_registerModel.Password" 
                               placeholder="Create a secure password" />
                    <ValidationMessage For="@(() => _registerModel.Password)" class="text-danger" />
                    <div class="form-text">Password must be at least 6 characters long.</div>
                </div>

                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Create Account
                    </button>
                </div>
            </EditForm>

            <div class="text-center">
                <div class="divider my-4">
                    <span class="divider-text">Or continue with</span>
                </div>
                
                <div class="d-grid mb-3">
                    <button class="btn btn-discord btn-lg" @onclick="LoginWithDiscord" disabled="@_isLoading">
                        <i class="fab fa-discord me-2"></i>
                        Continue with Discord
                    </button>
                </div>

                <div class="text-center mt-4">
                    <p class="text-muted mb-0">
                        Already have an account? 
                        <a href="/login" class="text-decoration-none">Sign in here</a>
                    </p>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
    }

    .login-card {
        background: white;
        padding: 3rem;
        border-radius: 1rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 450px;
    }

    .btn-primary {
        background: #667eea;
        border-color: #667eea;
        padding: 0.75rem 1.5rem;
    }

    .btn-primary:hover {
        background: #5a6fd8;
        border-color: #5a6fd8;
    }

    .btn-discord {
        background: #5865f2;
        border-color: #5865f2;
        color: white;
        padding: 0.75rem 1.5rem;
    }

    .btn-discord:hover {
        background: #4752c4;
        border-color: #4752c4;
        color: white;
    }

    .divider {
        position: relative;
        text-align: center;
    }

    .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #dee2e6;
    }

    .divider-text {
        background: white;
        padding: 0 1rem;
        color: #6c757d;
        font-size: 0.875rem;
    }

    .fab {
        font-family: "Font Awesome 6 Brands";
    }
</style>

@code {
    private bool _isLoading = false;
    private string _errorMessage = string.Empty;
    private RegisterModel _registerModel = new();

    private async Task RegisterUser()
    {
        try
        {
            _isLoading = true;
            _errorMessage = string.Empty;

            var response = await Http.PostAsJsonAsync("api/auth/register", _registerModel);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonSerializer.Deserialize<AuthResponse>(content, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                if (authResult?.Token != null)
                {
                    // Store the token
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", authResult.Token);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userInfo", JsonSerializer.Serialize(authResult.User));
                    
                    await JSRuntime.InvokeVoidAsync("showToast", "Account created successfully! Welcome!", "success");
                    
                    // Redirect to campaigns page
                    Navigation.NavigateTo("/campaigns");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
                _errorMessage = errorResponse?.Error ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Registration failed: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoginWithDiscord()
    {
        try
        {
            _isLoading = true;
            _errorMessage = string.Empty;

            var response = await Http.GetAsync("api/auth/discord-login-url");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<DiscordLoginUrlResponse>(content, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                Navigation.NavigateTo(result?.LoginUrl ?? "", forceLoad: true);
            }
            else
            {
                _errorMessage = "Failed to get Discord login URL. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Username is required")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters long")]
        public string Username { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Display name is required")]
        public string DisplayName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;
    }

    public class AuthResponse
    {
        public string Token { get; set; } = string.Empty;
        public UserInfo User { get; set; } = new();
    }

    public class UserInfo
    {
        public Guid Id { get; set; }
        public string Username { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public bool IsActive { get; set; }
    }

    public class ErrorResponse
    {
        public string Error { get; set; } = string.Empty;
    }

    public class DiscordLoginUrlResponse
    {
        public string LoginUrl { get; set; } = string.Empty;
    }
}