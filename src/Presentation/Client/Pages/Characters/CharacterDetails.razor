@page "/characters/{CharacterId:guid}"
@using PathfinderCampaignManager.Presentation.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="character-details-page">
    @if (IsLoading)
    {
        <div class="loading-container">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Loading character...</p>
        </div>
    }
    else if (Character == null)
    {
        <div class="error-container">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Character Not Found</h3>
            <p>The character you're looking for doesn't exist or you don't have permission to view it.</p>
            <a href="/campaigns" class="btn btn-primary">
                <i class="fas fa-arrow-left"></i>
                Back to Campaigns
            </a>
        </div>
    }
    else
    {
        <div class="character-header">
            <div class="character-info">
                <h1>@Character.Name</h1>
                <div class="character-summary">
                    <span class="level">Level @Character.Level</span>
                    @if (!string.IsNullOrEmpty(Character.Ancestry))
                    {
                        <span class="ancestry">@Character.Ancestry</span>
                    }
                    @if (!string.IsNullOrEmpty(Character.Heritage))
                    {
                        <span class="heritage">(@Character.Heritage)</span>
                    }
                    @if (!string.IsNullOrEmpty(Character.Class))
                    {
                        <span class="class">@Character.Class</span>
                    }
                </div>
                @if (!string.IsNullOrEmpty(Character.Background))
                {
                    <div class="background">
                        <strong>Background:</strong> @Character.Background
                    </div>
                }
            </div>
            <div class="character-actions">
                <button class="btn btn-secondary" @onclick="EditCharacter">
                    <i class="fas fa-edit"></i>
                    Edit Character
                </button>
            </div>
        </div>

        <div class="character-content">
            <!-- Ability Scores -->
            @if (Character.AbilityScores.Any())
            {
                <div class="character-section">
                    <h3>Ability Scores</h3>
                    <div class="ability-grid">
                        @foreach (var ability in Character.AbilityScores)
                        {
                            <div class="ability-block">
                                <div class="ability-name">@ability.Key</div>
                                <div class="ability-score">@ability.Value</div>
                                <div class="ability-modifier">@FormatModifier(GetModifier(ability.Value))</div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Skills -->
            @if (Character.Skills.Any())
            {
                <div class="character-section">
                    <h3>Skills</h3>
                    <div class="skills-grid">
                        @foreach (var skill in Character.Skills)
                        {
                            <div class="skill-item">
                                <span class="skill-name">@skill.Key</span>
                                <span class="skill-proficiency">@skill.Value</span>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Feats -->
            @if (Character.Feats.Any())
            {
                <div class="character-section">
                    <h3>Feats</h3>
                    <div class="feats-list">
                        @foreach (var feat in Character.Feats)
                        {
                            <div class="feat-item">
                                <span class="feat-name">@feat</span>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Equipment -->
            @if (Character.Equipment.Any())
            {
                <div class="character-section">
                    <h3>Equipment</h3>
                    <div class="equipment-list">
                        @foreach (var item in Character.Equipment)
                        {
                            <div class="equipment-item">
                                <i class="fas fa-sword"></i>
                                <span>@item</span>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="character-meta">
            <div class="meta-item">
                <strong>Created:</strong> @Character.CreatedAt.ToString("MMM dd, yyyy")
            </div>
            <div class="meta-item">
                <strong>Last Updated:</strong> @Character.UpdatedAt.ToString("MMM dd, yyyy")
            </div>
        </div>
    }
</div>

<style>
.character-details-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.loading-container, .error-container {
    text-align: center;
    padding: 4rem 2rem;
}

.loading-container i {
    font-size: 2rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.error-container i {
    font-size: 3rem;
    color: var(--error-color);
    margin-bottom: 1rem;
}

.error-container h3 {
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.error-container p {
    color: var(--text-secondary);
    margin-bottom: 2rem;
}

.character-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid var(--border-color);
}

.character-info h1 {
    margin: 0 0 0.5rem 0;
    color: var(--text-primary);
    font-size: 2.5rem;
}

.character-summary {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
}

.level {
    font-weight: 700;
    color: var(--primary-color);
    font-size: 1.1rem;
}

.ancestry, .heritage, .class {
    color: var(--text-secondary);
    font-size: 1.1rem;
}

.background {
    color: var(--text-secondary);
    font-size: 0.95rem;
}

.character-actions {
    display: flex;
    gap: 1rem;
}

.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.375rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-primary {
    background: var(--primary-color);
    color: white;
}

.btn-primary:hover {
    background: var(--primary-color-dark);
}

.btn-secondary {
    background: var(--surface-background);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
}

.btn-secondary:hover {
    background: var(--border-color);
}

.character-content {
    display: grid;
    gap: 2rem;
}

.character-section {
    background: white;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1.5rem;
}

.character-section h3 {
    margin: 0 0 1.5rem 0;
    color: var(--text-primary);
    font-size: 1.25rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.75rem;
}

.ability-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
}

.ability-block {
    text-align: center;
    padding: 1rem;
    background: var(--surface-background);
    border-radius: 0.375rem;
    border: 1px solid var(--border-color);
}

.ability-name {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
}

.ability-score {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.ability-modifier {
    font-size: 0.9rem;
    color: var(--text-secondary);
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.75rem;
}

.skill-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0.75rem;
    background: var(--surface-background);
    border-radius: 0.25rem;
    border: 1px solid var(--border-color);
}

.skill-name {
    font-weight: 500;
    color: var(--text-primary);
}

.skill-proficiency {
    font-size: 0.875rem;
    color: var(--text-secondary);
    text-transform: capitalize;
}

.feats-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
}

.feat-item {
    padding: 0.5rem 1rem;
    background: var(--primary-color-10);
    border: 1px solid var(--primary-color-20);
    border-radius: 0.375rem;
    color: var(--primary-color);
    font-weight: 500;
}

.equipment-list {
    display: grid;
    gap: 0.5rem;
}

.equipment-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0.75rem;
    background: var(--surface-background);
    border-radius: 0.25rem;
    border: 1px solid var(--border-color);
}

.equipment-item i {
    color: var(--text-secondary);
    width: 16px;
}

.character-meta {
    display: flex;
    gap: 2rem;
    justify-content: center;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.meta-item strong {
    color: var(--text-primary);
}

@@media (max-width: 768px) {
    .character-header {
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .character-summary {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .ability-grid {
        grid-template-columns: repeat(3, 1fr);
    }
    
    .skills-grid {
        grid-template-columns: 1fr;
    }
    
    .character-meta {
        flex-direction: column;
        gap: 0.5rem;
    }
}
</style>