@page "/combat-signalr/{combatId:guid?}"
@page "/combat-signalr"
@using PathfinderCampaignManager.Presentation.Client.Services
@using PathfinderCampaignManager.Presentation.Client.Store.Auth
@using PathfinderCampaignManager.Presentation.Shared.Models
@using System.ComponentModel.DataAnnotations
@using Fluxor
@inject CombatSignalRService SignalRService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IState<AuthState> AuthState
@implements IAsyncDisposable

<PageTitle>Real-Time Combat Tracker</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>
                <i class="fas fa-swords me-2"></i>
                Real-Time Combat Tracker
                @if (_session != null)
                {
                    <small class="text-muted">- @_session.Name</small>
                }
            </h2>
            <div class="d-flex align-items-center gap-3">
                <span class="badge @(_isConnected ? "bg-success" : "bg-danger")">
                    @(_isConnected ? "Connected" : "Disconnected")
                </span>
                @if (_session != null)
                {
                    <span class="badge @(_session.IsActive ? "bg-primary" : "bg-secondary")">
                        @(_session.IsActive ? $"Round {_session.Round}" : "Inactive")
                    </span>
                }
            </div>
        </div>
        <div class="d-flex gap-2">
            @if (_session != null && !_session.IsActive)
            {
                <button class="btn btn-success" @onclick="StartCombat">
                    <i class="fas fa-play me-1"></i>
                    Start Combat
                </button>
            }
            else if (_session?.IsActive == true)
            {
                <button class="btn btn-primary" @onclick="NextTurn">
                    <i class="fas fa-forward me-1"></i>
                    Next Turn
                </button>
                <button class="btn btn-warning" @onclick="EndCombat">
                    <i class="fas fa-stop me-1"></i>
                    End Combat
                </button>
            }
            <div class="btn-group">
                <button class="btn btn-outline-primary" @onclick="ShowAddParticipantModal">
                    <i class="fas fa-plus me-1"></i>
                    Add Participant
                </button>
                @if (CampaignId.HasValue)
                {
                    <button class="btn btn-outline-warning" @onclick="ResetCombat" title="Reset to NPCs only">
                        <i class="fas fa-refresh me-1"></i>
                        Reset
                    </button>
                }
            </div>
        </div>
    </div>

    @if (_session?.Participants.Any() == true)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Initiative Order</h5>
            </div>
            <div class="list-group list-group-flush">
                @{
                    var orderedParticipants = _session.Participants.OrderByDescending(p => p.Initiative).ToList();
                }
                @foreach (var participant in orderedParticipants)
                {
                    var participantIndex = orderedParticipants.IndexOf(participant);
                    var isCurrentTurn = _session.IsActive && participantIndex == _session.CurrentTurn;
                    <div class="list-group-item @(isCurrentTurn ? "list-group-item-warning" : "")">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <div class="d-flex align-items-center">
                                    @if (isCurrentTurn)
                                    {
                                        <i class="fas fa-arrow-right text-primary me-2"></i>
                                    }
                                    <div>
                                        <h6 class="mb-0">@participant.Name</h6>
                                        <small class="text-muted">
                                            <span class="badge @(participant.IsPlayerCharacter ? "bg-info" : "bg-warning")">
                                                @(participant.IsPlayerCharacter ? "PC" : participant.Type)
                                            </span>
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2 text-center">
                                <strong>Init: @participant.Initiative</strong>
                                <br>
                                @if (CanEditParticipant(participant))
                                {
                                    <input type="number" class="form-control form-control-sm mt-1" 
                                           value="@participant.Initiative" 
                                           @onchange="@((e) => UpdateInitiative(participant.Id.ToString(), int.Parse(e.Value?.ToString() ?? "0")))"
                                           style="width: 70px;" />
                                }
                                else
                                {
                                    <small class="text-muted">@participant.Initiative</small>
                                }
                            </div>
                            <div class="col-md-2 text-center">
                                <strong>HP: @participant.CurrentHitPoints / @participant.HitPoints</strong>
                                @if (CanEditParticipant(participant))
                                {
                                    <div class="d-flex gap-1 mt-1">
                                        <input type="number" class="form-control form-control-sm" 
                                               value="@participant.CurrentHitPoints" 
                                               @onchange="@((e) => UpdateHitPoints(participant.Id.ToString(), int.Parse(e.Value?.ToString() ?? "0"), participant.HitPoints))"
                                               style="width: 60px;" />
                                        <span class="align-self-center">/</span>
                                        <input type="number" class="form-control form-control-sm" 
                                               value="@participant.HitPoints" 
                                               @onchange="@((e) => UpdateHitPoints(participant.Id.ToString(), participant.CurrentHitPoints, int.Parse(e.Value?.ToString() ?? "0")))"
                                               style="width: 60px;" />
                                    </div>
                                }
                                else
                                {
                                    <div class="mt-1">
                                        <small class="text-muted">@participant.CurrentHitPoints / @participant.HitPoints</small>
                                    </div>
                                }
                            </div>
                            <div class="col-md-2 text-center">
                                <strong>AC: @participant.ArmorClass</strong>
                                @if (CanEditParticipant(participant))
                                {
                                    <br>
                                    <input type="number" class="form-control form-control-sm mt-1" 
                                           value="@participant.ArmorClass" 
                                           @onchange="@((e) => UpdateArmorClass(participant.Id.ToString(), int.Parse(e.Value?.ToString() ?? "10")))"
                                           style="width: 60px;" />
                                }
                                <br>
                                <small class="text-muted">
                                    Perc: @participant.Perception
                                </small>
                            </div>
                            <div class="col-md-2 text-center">
                                @if (CanEditParticipant(participant))
                                {
                                    <div class="d-flex flex-column gap-1">
                                        <div class="d-flex align-items-center">
                                            <small class="me-1">F:</small>
                                            <input type="number" class="form-control form-control-sm" 
                                                   value="@participant.Fortitude" 
                                                   @onchange="@((e) => UpdateSave(participant.Id.ToString(), "Fortitude", int.Parse(e.Value?.ToString() ?? "0")))"
                                                   style="width: 45px;" />
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <small class="me-1">R:</small>
                                            <input type="number" class="form-control form-control-sm" 
                                                   value="@participant.Reflex" 
                                                   @onchange="@((e) => UpdateSave(participant.Id.ToString(), "Reflex", int.Parse(e.Value?.ToString() ?? "0")))"
                                                   style="width: 45px;" />
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <small class="me-1">W:</small>
                                            <input type="number" class="form-control form-control-sm" 
                                                   value="@participant.Will" 
                                                   @onchange="@((e) => UpdateSave(participant.Id.ToString(), "Will", int.Parse(e.Value?.ToString() ?? "0")))"
                                                   style="width: 45px;" />
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <small class="text-muted">
                                        F: @participant.Fortitude<br>
                                        R: @participant.Reflex<br>
                                        W: @participant.Will
                                    </small>
                                }
                            </div>
                            <div class="col-md-1 text-end">
                                <button class="btn btn-sm btn-outline-danger" 
                                        @onclick="() => RemoveParticipant(participant.Id.ToString())">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        @if (participant.Conditions.Any())
                        {
                            <div class="mt-2">
                                <small class="text-muted">Conditions:</small>
                                @foreach (var condition in participant.Conditions)
                                {
                                    <span class="badge bg-danger ms-1">@condition</span>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-users fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">No Participants</h4>
            <p class="text-muted">Add characters and monsters to start combat.</p>
            <button class="btn btn-primary" @onclick="ShowAddParticipantModal">
                <i class="fas fa-plus me-1"></i>
                Add First Participant
            </button>
        </div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle me-1"></i>
            @_errorMessage
        </div>
    }
</div>

<!-- Add Participant Modal -->
@if (_showAddModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Combat Participant</h5>
                    <button type="button" class="btn-close" @onclick="HideAddParticipantModal"></button>
                </div>
                <div class="modal-body">
                    @if (CampaignId.HasValue && (_campaignCharacters.Any() || _campaignNpcs.Any()))
                    {
                        <div class="mb-4">
                            <h6>Quick Add from Campaign</h6>
                            @if (_campaignCharacters.Any())
                            {
                                <div class="mb-3">
                                    <label class="form-label">Player Characters</label>
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var character in _campaignCharacters)
                                        {
                                            <button type="button" class="btn btn-outline-info btn-sm" 
                                                    @onclick="() => QuickAddCharacter(character)">
                                                <i class="fas fa-user me-1"></i>
                                                @character.Name
                                            </button>
                                        }
                                    </div>
                                </div>
                            }
                            @if (_campaignNpcs.Any())
                            {
                                <div class="mb-3">
                                    <label class="form-label">NPCs & Monsters</label>
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var npc in _campaignNpcs)
                                        {
                                            <button type="button" class="btn btn-outline-warning btn-sm"
                                                    @onclick="() => QuickAddNpc(npc)">
                                                <i class="fas @(npc.IsNpc ? "fa-user-tie" : "fa-dragon") me-1"></i>
                                                @npc.Name
                                            </button>
                                        }
                                    </div>
                                </div>
                            }
                            <hr />
                        </div>
                    }

                    <EditForm Model="@_addParticipantModel" OnValidSubmit="@AddParticipant">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="participantName" class="form-label">Name *</label>
                            <InputText id="participantName" @bind-Value="_addParticipantModel.Name" class="form-control" />
                            <ValidationMessage For="@(() => _addParticipantModel.Name)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="participantType" class="form-label">Type</label>
                            <InputSelect id="participantType" @bind-Value="_addParticipantModel.Type" class="form-select">
                                <option value="PC">Player Character</option>
                                <option value="NPC">NPC</option>
                                <option value="Monster">Monster</option>
                            </InputSelect>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="initiative" class="form-label">Initiative *</label>
                                <InputNumber id="initiative" @bind-Value="_addParticipantModel.Initiative" class="form-control" />
                                <ValidationMessage For="@(() => _addParticipantModel.Initiative)" class="text-danger" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="ac" class="form-label">AC</label>
                                <InputNumber id="ac" @bind-Value="_addParticipantModel.ArmorClass" class="form-control" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="hp" class="form-label">Hit Points</label>
                                <InputNumber id="hp" @bind-Value="_addParticipantModel.HitPoints" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="perception" class="form-label">Perception</label>
                                <InputNumber id="perception" @bind-Value="_addParticipantModel.Perception" class="form-control" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="fort" class="form-label">Fortitude</label>
                                <InputNumber id="fort" @bind-Value="_addParticipantModel.Fortitude" class="form-control" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="reflex" class="form-label">Reflex</label>
                                <InputNumber id="reflex" @bind-Value="_addParticipantModel.Reflex" class="form-control" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="will" class="form-label">Will</label>
                                <InputNumber id="will" @bind-Value="_addParticipantModel.Will" class="form-control" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="HideAddParticipantModal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">
                                Add Participant
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Guid? CombatId { get; set; }
    [Parameter] [SupplyParameterFromQuery] public Guid? CampaignId { get; set; }

    private PathfinderCampaignManager.Presentation.Shared.Models.CombatSession? _session = new PathfinderCampaignManager.Presentation.Shared.Models.CombatSession();
    private bool _isConnected = false;
    private string _errorMessage = string.Empty;
    private bool _showAddModal = false;
    private AddParticipantModel _addParticipantModel = new();
    private List<CampaignCharacter> _campaignCharacters = new();
    private List<NpcMonster> _campaignNpcs = new();
    private bool _isLoadingCampaignData = false;

    protected override async Task OnInitializedAsync()
    {
        if (CombatId == null)
        {
            // If joining from a campaign, use the campaign ID as the combat ID
            CombatId = CampaignId ?? Guid.NewGuid();
        }

        // Load campaign data if joining from a campaign
        if (CampaignId.HasValue)
        {
            await LoadCampaignData();
        }

        try
        {
            _errorMessage = "Initializing SignalR connection...";
            StateHasChanged();
            
            await SignalRService.InitializeAsync();
            SignalRService.SubscribeToEvents();
            
            // Subscribe to events
            SignalRService.OnCombatStateUpdated += OnCombatStateUpdated;
            SignalRService.OnInitiativeUpdated += OnInitiativeUpdated;
            SignalRService.OnHitPointsUpdated += OnHitPointsUpdated;
            SignalRService.OnParticipantAdded += OnParticipantAdded;
            SignalRService.OnParticipantRemoved += OnParticipantRemoved;
            SignalRService.OnCombatStarted += OnCombatStarted;
            SignalRService.OnCombatEnded += OnCombatEnded;
            SignalRService.OnTurnChanged += OnTurnChanged;

            _isConnected = SignalRService.IsConnected;
            
            if (_isConnected)
            {
                _errorMessage = "Testing connection...";
                StateHasChanged();
                
                // First test with ping
                try
                {
                    await SignalRService.PingAsync();
                    Console.WriteLine("Ping successful");
                    
                    _errorMessage = "Joining combat session...";
                    StateHasChanged();
                    
                    await SignalRService.JoinCombatAsync(CombatId.ToString()!, CampaignId?.ToString());
                    
                    _errorMessage = string.Empty;
                    StateHasChanged();
                }
                catch (Exception pingEx)
                {
                    _errorMessage = $"Connection test failed: {pingEx.Message}";
                    Console.WriteLine($"Ping failed: {pingEx}");
                }
            }
            else
            {
                _errorMessage = "SignalR connection failed - not connected";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to connect to SignalR: {ex.Message}. Stack: {ex.StackTrace}";
            Console.WriteLine($"SignalR Error: {ex}");
        }
    }

    private async Task UpdateInitiative(string participantId, int initiative)
    {
        try
        {
            await SignalRService.UpdateInitiativeAsync(CombatId.ToString()!, participantId, initiative);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to update initiative: {ex.Message}";
        }
    }

    private async Task UpdateHitPoints(string participantId, int currentHp, int maxHp)
    {
        try
        {
            await SignalRService.UpdateHitPointsAsync(CombatId.ToString()!, participantId, currentHp, maxHp);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to update hit points: {ex.Message}";
        }
    }

    private async Task UpdateArmorClass(string participantId, int armorClass)
    {
        try
        {
            await SignalRService.UpdateArmorClassAsync(CombatId.ToString()!, participantId, armorClass);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to update armor class: {ex.Message}";
        }
    }

    private async Task UpdateSave(string participantId, string saveType, int value)
    {
        try
        {
            await SignalRService.UpdateSaveAsync(CombatId.ToString()!, participantId, saveType, value);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to update {saveType} save: {ex.Message}";
        }
    }

    private async Task LoadCampaignData()
    {
        if (!CampaignId.HasValue) return;

        _isLoadingCampaignData = true;
        try
        {
            // Try to load real campaign data first
            try
            {
                var charactersResponse = await Http.GetFromJsonAsync<List<CampaignCharacter>>($"api/campaigns/{CampaignId}/characters");
                if (charactersResponse != null)
                {
                    _campaignCharacters = charactersResponse;
                }
            }
            catch (HttpRequestException)
            {
                // API endpoint doesn't exist yet, use mock data
                Console.WriteLine("Using mock character data - API endpoint not implemented");
            }

            try
            {
                var npcsResponse = await Http.GetFromJsonAsync<List<NpcMonster>>($"api/campaigns/{CampaignId}/npcs");
                if (npcsResponse != null)
                {
                    _campaignNpcs = npcsResponse;
                }
            }
            catch (HttpRequestException)
            {
                // API endpoint doesn't exist yet, use mock data
                Console.WriteLine("Using mock NPC data - API endpoint not implemented");
            }

            // Fallback to mock data if API calls failed
            if (!_campaignCharacters.Any())
            {
                _campaignCharacters = new List<CampaignCharacter>
                {
                    new() { Id = Guid.NewGuid(), Name = "Aelindra", Class = "Ranger", Level = 3, HitPoints = 28, ArmorClass = 16 },
                    new() { Id = Guid.NewGuid(), Name = "Thorik", Class = "Fighter", Level = 3, HitPoints = 35, ArmorClass = 18 },
                    new() { Id = Guid.NewGuid(), Name = "Lyra", Class = "Wizard", Level = 3, HitPoints = 20, ArmorClass = 13 }
                };
            }

            if (!_campaignNpcs.Any())
            {
                _campaignNpcs = new List<NpcMonster>
                {
                    new() { Id = Guid.NewGuid(), Name = "Goblin Warrior", IsNpc = false, HitPoints = 18, ArmorClass = 15, Initiative = 12 },
                    new() { Id = Guid.NewGuid(), Name = "Orc Brute", IsNpc = false, HitPoints = 25, ArmorClass = 13, Initiative = 8 },
                    new() { Id = Guid.NewGuid(), Name = "Town Guard", IsNpc = true, HitPoints = 22, ArmorClass = 16, Initiative = 10 }
                };
            }

            // Auto-populate NPCs into combat if this is a new combat session
            if (_session?.Participants?.Count == 0 && _campaignNpcs.Any())
            {
                await AutoPopulateNpcs();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load campaign data: {ex.Message}");
            _errorMessage = "Failed to load campaign data. Using default encounter.";
        }
        finally
        {
            _isLoadingCampaignData = false;
        }
    }

    private async Task AutoPopulateNpcs()
    {
        if (_session?.Participants == null || _campaignNpcs == null) return;

        foreach (var npc in _campaignNpcs.Take(5)) // Limit to 5 NPCs to avoid overwhelming
        {
            if (string.IsNullOrWhiteSpace(npc.Name)) continue;

            var participant = new PathfinderCampaignManager.Presentation.Shared.Models.CombatParticipant
            {
                Id = Guid.NewGuid(),
                Name = npc.Name,
                Type = npc.IsNpc ? "NPC" : "Monster",
                HitPoints = Math.Max(1, npc.HitPoints), // Ensure at least 1 HP
                CurrentHitPoints = Math.Max(1, npc.HitPoints),
                ArmorClass = Math.Max(10, npc.ArmorClass), // Ensure at least AC 10
                Initiative = npc.Initiative, // Use configured initiative or 0
                IsPlayerCharacter = false,
                CharacterId = npc.Id.ToString()
            };

            _session.Participants.Add(participant);
        }

        StateHasChanged();
    }

    private async Task ResetCombat()
    {
        if (_session == null) return;

        _session.Participants.Clear();
        _session.IsActive = false;
        _session.IsPaused = false;
        _session.CurrentTurn = 0;
        _session.Round = 1;

        // Re-populate NPCs if from campaign
        if (CampaignId.HasValue && _campaignNpcs.Any())
        {
            await AutoPopulateNpcs();
        }

        StateHasChanged();
    }

    private async Task QuickAddCharacter(CampaignCharacter character)
    {
        try
        {
            var participant = new CombatParticipant
            {
                Name = character.Name,
                Type = "PC",
                Initiative = 10, // Default initiative
                HitPoints = character.HitPoints,
                CurrentHitPoints = character.HitPoints,
                ArmorClass = character.ArmorClass,
                IsPlayerCharacter = true,
                CharacterId = character.Id.ToString()
            };

            await SignalRService.AddParticipantAsync(CombatId.ToString()!, participant);
            HideAddParticipantModal();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to add participant: {ex.Message}";
        }
    }

    private async Task QuickAddNpc(NpcMonster npc)
    {
        try
        {
            var participant = new CombatParticipant
            {
                Name = npc.Name,
                Type = npc.IsNpc ? "NPC" : "Monster",
                Initiative = npc.Initiative,
                HitPoints = npc.HitPoints,
                CurrentHitPoints = npc.HitPoints,
                ArmorClass = npc.ArmorClass,
                IsPlayerCharacter = false,
                CharacterId = npc.Id.ToString()
            };

            await SignalRService.AddParticipantAsync(CombatId.ToString()!, participant);
            HideAddParticipantModal();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to add participant: {ex.Message}";
        }
    }

    private async Task AddParticipant()
    {
        try
        {
            var participant = new CombatParticipant
            {
                Name = _addParticipantModel.Name!,
                Type = _addParticipantModel.Type,
                Initiative = _addParticipantModel.Initiative,
                HitPoints = _addParticipantModel.HitPoints,
                CurrentHitPoints = _addParticipantModel.HitPoints,
                ArmorClass = _addParticipantModel.ArmorClass,
                Perception = _addParticipantModel.Perception,
                Fortitude = _addParticipantModel.Fortitude,
                Reflex = _addParticipantModel.Reflex,
                Will = _addParticipantModel.Will,
                IsPlayerCharacter = _addParticipantModel.Type == "PC"
            };

            await SignalRService.AddParticipantAsync(CombatId.ToString()!, participant);
            HideAddParticipantModal();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to add participant: {ex.Message}";
        }
    }

    private async Task RemoveParticipant(string participantId)
    {
        try
        {
            await SignalRService.RemoveParticipantAsync(CombatId.ToString()!, participantId);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to remove participant: {ex.Message}";
        }
    }

    private async Task StartCombat()
    {
        try
        {
            await SignalRService.StartCombatAsync(CombatId.ToString()!);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to start combat: {ex.Message}";
        }
    }

    private async Task EndCombat()
    {
        try
        {
            await SignalRService.EndCombatAsync(CombatId.ToString()!);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to end combat: {ex.Message}";
        }
    }

    private async Task NextTurn()
    {
        try
        {
            await SignalRService.NextTurnAsync(CombatId.ToString()!);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to advance turn: {ex.Message}";
        }
    }

    private void ShowAddParticipantModal()
    {
        _showAddModal = true;
        _addParticipantModel = new();
    }

    private void HideAddParticipantModal()
    {
        _showAddModal = false;
        _addParticipantModel = new();
    }

    // SignalR Event Handlers
    private void OnCombatStateUpdated(PathfinderCampaignManager.Presentation.Shared.Models.CombatSession session)
    {
        InvokeAsync(async () =>
        {
            try
            {
                if (session != null)
                {
                    _session = session;
                    _errorMessage = string.Empty;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"Error updating combat state: {ex.Message}";
                StateHasChanged();
            }
        });
    }

    private async void OnInitiativeUpdated(string participantId, int initiative)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void OnHitPointsUpdated(string participantId, int currentHp, int maxHp)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void OnParticipantAdded(CombatParticipant participant)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void OnParticipantRemoved(string participantId)
    {
        await InvokeAsync(StateHasChanged);
    }

    private void OnCombatStarted(PathfinderCampaignManager.Presentation.Shared.Models.CombatSession session)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    private void OnCombatEnded(PathfinderCampaignManager.Presentation.Shared.Models.CombatSession session)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    private async void OnTurnChanged(int currentTurn, int round)
    {
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (CombatId != null)
        {
            try
            {
                await SignalRService.LeaveCombatAsync(CombatId.ToString()!);
            }
            catch { }
        }
        
        SignalRService.UnsubscribeFromEvents();
        await SignalRService.DisposeAsync();
    }

    private bool CanEditParticipant(CombatParticipant participant)
    {
        // GMs can edit all participants
        if (AuthState.Value.User?.Role == "GameMaster" || AuthState.Value.User?.Role == "Admin")
            return true;
            
        // Players can only edit their own characters
        if (participant.IsPlayerCharacter && !string.IsNullOrEmpty(participant.PlayerId))
        {
            return participant.PlayerId == AuthState.Value.User?.Id.ToString();
        }
        
        return false;
    }

    public class AddParticipantModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Initiative is required")]
        [Range(-10, 50, ErrorMessage = "Initiative must be between -10 and 50")]
        public int Initiative { get; set; } = 10;

        public string Type { get; set; } = "PC";
        public int HitPoints { get; set; } = 20;
        public int ArmorClass { get; set; } = 15;
        public int Perception { get; set; } = 10;
        public int Fortitude { get; set; } = 10;
        public int Reflex { get; set; } = 10;
        public int Will { get; set; } = 10;
    }

    public class CampaignCharacter
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Class { get; set; } = string.Empty;
        public int Level { get; set; } = 1;
        public int HitPoints { get; set; } = 20;
        public int ArmorClass { get; set; } = 15;
    }

    public class NpcMonster
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public bool IsNpc { get; set; } = false;
        public int HitPoints { get; set; } = 20;
        public int ArmorClass { get; set; } = 15;
        public int Initiative { get; set; } = 0;
    }
}