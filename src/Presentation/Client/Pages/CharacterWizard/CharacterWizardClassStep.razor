@using PathfinderCampaignManager.Domain.Entities.Pathfinder

<div class="character-wizard-class-step">
    <h3>Choose Your Class</h3>
    <p class="step-description">Your class determines your character's role, abilities, and how they approach challenges in the world.</p>
    
    @if (IsLoading)
    {
        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i>
            Loading classes...
        </div>
    }
    else if (AvailableOptions.Any())
    {
        <div class="class-grid">
            @foreach (var characterClass in AvailableOptions.Cast<PfClass>())
            {
                <div class="class-card @(IsSelected(characterClass) ? "selected" : "")"
                     @onclick="() => SelectClass(characterClass)">
                    <div class="class-header">
                        <div class="class-icon">
                            <i class="@GetClassIcon(characterClass.Name)"></i>
                        </div>
                        <div class="class-basic-info">
                            <h4>@characterClass.Name</h4>
                            <div class="class-stats">
                                <div class="stat-item">
                                    <span class="stat-label">HP/Level:</span>
                                    <span class="stat-value">@characterClass.HitPoints</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">Key Ability:</span>
                                    <span class="stat-value">@characterClass.KeyAbility</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <p class="class-summary">@GetClassSummary(characterClass)</p>
                    @if (characterClass.ClassFeatures?.Any() == true)
                    {
                        <div class="class-features">
                            <span class="features-label">Key Features:</span>
                            <div class="features-list">
                                @foreach (var feature in characterClass.ClassFeatures.Take(3))
                                {
                                    <span class="feature-tag">@feature</span>
                                }
                            </div>
                        </div>
                    }
                    <div class="class-complexity">
                        <span class="complexity-label">Complexity:</span>
                        <div class="complexity-indicator">
                            @for (int i = 1; i <= 3; i++)
                            {
                                <div class="complexity-dot @(i <= GetClassComplexity(characterClass.Name) ? "filled" : "")"></div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-data">
            <i class="fas fa-exclamation-triangle"></i>
            <p>No classes available. Please check your data configuration.</p>
        </div>
    }
</div>

<style>
.character-wizard-class-step {
    padding: 1rem 0;
}

.step-description {
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.5;
}

.class-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.class-card {
    border: 2px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    background: white;
}

.class-card:hover {
    border-color: var(--primary-color);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.class-card.selected {
    border-color: var(--primary-color);
    background: var(--primary-color-10);
    box-shadow: 0 4px 12px rgba(var(--primary-rgb), 0.2);
}

.class-header {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1rem;
}

.class-icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: var(--primary-color-20);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: var(--primary-color);
}

.class-card.selected .class-icon {
    background: var(--primary-color);
    color: white;
}

.class-basic-info {
    flex: 1;
}

.class-basic-info h4 {
    margin: 0 0 0.5rem 0;
    color: var(--text-primary);
    font-size: 1.125rem;
}

.class-stats {
    display: flex;
    gap: 1rem;
}

.stat-item {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
}

.stat-label {
    font-size: 0.75rem;
    color: var(--text-secondary);
    font-weight: 500;
}

.stat-value {
    font-size: 0.875rem;
    color: var(--text-primary);
    font-weight: 600;
}

.class-summary {
    color: var(--text-secondary);
    font-size: 0.875rem;
    line-height: 1.4;
    margin-bottom: 1rem;
}

.class-features {
    margin-bottom: 1rem;
}

.features-label {
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.875rem;
    display: block;
    margin-bottom: 0.5rem;
}

.features-list {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
}

.feature-tag {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    background: var(--info-color-20);
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--info-color);
}

.class-complexity {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.complexity-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
}

.complexity-indicator {
    display: flex;
    gap: 0.25rem;
}

.complexity-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--border-color);
    transition: background-color 0.2s ease;
}

.complexity-dot.filled {
    background: var(--warning-color);
}

.loading-spinner, .no-data {
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
}

.no-data i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--warning-color);
}
</style>