@using PathfinderCampaignManager.Domain.Enums

<div class="notes-panel">
    <div class="notes-header">
        <div class="header-title">
            <i class="fas fa-sticky-note"></i>
            <span>Notes</span>
            <span class="notes-count">(@VisibleNotes.Count)</span>
        </div>
        
        <div class="header-actions">
            <div class="view-controls">
                <button class="view-button @GetViewModeClass("all")" 
                        @onclick="@(() => SetViewMode("all"))"
                        title="All Notes">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="view-button @GetViewModeClass("private")" 
                        @onclick="@(() => SetViewMode("private"))"
                        title="My Notes">
                    <i class="fas fa-user"></i>
                </button>
                <button class="view-button @GetViewModeClass("shared")" 
                        @onclick="@(() => SetViewMode("shared"))"
                        title="Shared Notes">
                    <i class="fas fa-users"></i>
                </button>
                @if (IsCurrentUserDM)
                {
                    <button class="view-button @GetViewModeClass("dm")" 
                            @onclick="@(() => SetViewMode("dm"))"
                            title="DM Notes">
                        <i class="fas fa-crown"></i>
                    </button>
                }
            </div>
            
            <button class="add-note-button" @onclick="StartCreatingNote" title="Add Note (N)">
                <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>

    <!-- Search and Filter -->
    @if (ShouldShowSearch)
    {
        <div class="notes-search">
            <div class="search-input-container">
                <input type="text" 
                       class="search-input" 
                       placeholder="Search notes and tags..."
                       @bind="SearchQuery"
                       @bind:event="oninput"
                       @onkeydown="HandleSearchKeyDown" />
                <i class="fas fa-search search-icon"></i>
            </div>
        </div>
    }

    <!-- Notes List -->
    <div class="notes-list" @ref="_notesListRef">
        @if (IsLoading)
        {
            <div class="notes-loading">
                <div class="spinner"></div>
                <span>Loading notes...</span>
            </div>
        }
        else if (VisibleNotes.Any())
        {
            <!-- Pinned Notes -->
            @if (HasPinnedNotes)
            {
                <div class="notes-section">
                    <h4 class="section-title">
                        <i class="fas fa-thumbtack"></i>
                        Pinned
                    </h4>
                    @foreach (var note in VisibleNotes.Where(n => n.IsPinned).OrderBy(n => n.SortOrder))
                    {
                        <NoteCard Note="note" 
                                 IsEditing="EditingNoteId == note.Id"
                                 CanEdit="CanEditNote(note)"
                                 OnEdit="StartEditingNote"
                                 OnSave="@(async (note) => await SaveNote(note))"
                                 OnCancel="@(() => CancelEdit())"
                                 OnDelete="@(async (note) => await DeleteNote(note))"
                                 OnVisibilityChange="@(async (args) => await ChangeNoteVisibility(args.Note, args.Visibility))"
                                 OnPin="@(async (note) => await ToggleNotePin(note))" />
                    }
                </div>
            }

            <!-- Regular Notes -->
            <div class="notes-section">
                @if (HasPinnedNotes)
                {
                    <h4 class="section-title">
                        <i class="fas fa-sticky-note"></i>
                        Notes
                    </h4>
                }
                @foreach (var note in VisibleNotes.Where(n => !n.IsPinned).OrderByDescending(n => n.UpdatedAt ?? n.CreatedAt))
                {
                    <NoteCard Note="note" 
                             IsEditing="EditingNoteId == note.Id"
                             CanEdit="CanEditNote(note)"
                             OnEdit="StartEditingNote"
                             OnSave="@(async (note) => await SaveNote(note))"
                             OnCancel="@(() => CancelEdit())"
                             OnDelete="@(async (note) => await DeleteNote(note))"
                             OnVisibilityChange="@(async (args) => await ChangeNoteVisibility(args.Note, args.Visibility))"
                             OnPin="@(async (note) => await ToggleNotePin(note))" />
                }
            </div>
        }
        else if (!string.IsNullOrEmpty(SearchQuery))
        {
            <div class="notes-empty">
                <i class="fas fa-search fa-2x"></i>
                <p>No notes match your search</p>
                <button class="btn btn-sm btn-outline-primary" @onclick="ClearSearch">
                    Clear Search
                </button>
            </div>
        }
        else
        {
            <div class="notes-empty">
                <i class="fas fa-sticky-note fa-2x"></i>
                <p>@GetEmptyMessage()</p>
                @if (ShowAddFirstNoteButton)
                {
                    <button class="btn btn-sm btn-primary" @onclick="StartCreatingNote">
                        <i class="fas fa-plus"></i>
                        Add First Note
                    </button>
                }
            </div>
        }
    </div>

    <!-- Create Note Form -->
    @if (IsCreatingNote)
    {
        <div class="create-note-form">
            <div class="form-header">
                <h4>New Note</h4>
                <button class="close-button" @onclick="CancelCreateNote">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <EditForm Model="@NewNoteModel" OnValidSubmit="@CreateNote">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <input type="text" 
                           class="form-control" 
                           placeholder="Note title..."
                           @bind="NewNoteModel.Title"
                           @ref="_newNoteTitleRef" />
                </div>
                
                <div class="form-group">
                    <textarea class="form-control content-textarea" 
                              placeholder="Write your note here... (Markdown supported)"
                              @bind="NewNoteModel.Content"
                              rows="4"></textarea>
                </div>
                
                <div class="form-row">
                    <div class="visibility-selector">
                        <label>Visibility:</label>
                        <select class="form-control" @bind="NewNoteModel.Visibility">
                            <option value="@NoteVisibility.Private">Private (Only Me)</option>
                            <option value="@NoteVisibility.Shared">Shared (Owner & DM)</option>
                            @if (IsCurrentUserDM)
                            {
                                <option value="@NoteVisibility.DMOnly">DM Only</option>
                            }
                        </select>
                    </div>
                    
                    <div class="color-selector">
                        <label>Color:</label>
                        <div class="color-options">
                            @foreach (var color in NoteColors)
                            {
                                <button type="button" 
                                       class="color-option @(NewNoteModel.Color == color.Value ? "active" : "")"
                                       style="background-color: @color.Value"
                                       @onclick="() => NewNoteModel.Color = color.Value"
                                       title="@color.Name">
                                </button>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" 
                           class="btn btn-primary" 
                           disabled="@IsSubmitting">
                        @if (IsSubmitting)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                        }
                        Save Note
                    </button>
                    <button type="button" 
                           class="btn btn-secondary" 
                           @onclick="CancelCreateNote">
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    }
</div>

<style>
.notes-panel {
    display: flex;
    flex-direction: column;
    height: 100%;
    background: var(--surface-background);
}

.notes-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: white;
    border-bottom: 1px solid var(--border-color);
    position: sticky;
    top: 0;
    z-index: 10;
}

.header-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: var(--text-primary);
}

.notes-count {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: normal;
}

.header-actions {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.view-controls {
    display: flex;
    background: var(--surface-background);
    border-radius: 0.375rem;
    padding: 0.25rem;
    gap: 0.125rem;
}

.view-button {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    border-radius: 0.25rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
}

.view-button:hover {
    background: white;
    color: var(--text-primary);
}

.view-button.active {
    background: white;
    color: var(--primary-color);
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.add-note-button {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.add-note-button:hover {
    background: var(--primary-color-dark);
    transform: translateY(-1px);
}

.notes-search {
    padding: 1rem;
    background: white;
    border-bottom: 1px solid var(--border-color);
}

.search-input-container {
    position: relative;
}

.search-input {
    width: 100%;
    padding: 0.5rem 1rem 0.5rem 2.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
}

.search-input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.search-icon {
    position: absolute;
    left: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.notes-list {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
}

.notes-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 2rem;
    color: var(--text-secondary);
}

.spinner {
    width: 20px;
    height: 20px;
    border: 2px solid var(--border-color);
    border-top: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

.notes-section {
    margin-bottom: 1.5rem;
}

.section-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0 0 0.75rem 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.notes-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 3rem 1rem;
    color: var(--text-secondary);
}

.notes-empty i {
    margin-bottom: 1rem;
    opacity: 0.5;
}

.notes-empty p {
    margin-bottom: 1rem;
}

.create-note-form {
    position: fixed;
    bottom: 1rem;
    left: 1rem;
    right: 1rem;
    background: white;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.15);
    z-index: 100;
    max-width: 400px;
    margin: 0 auto;
}

.form-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1rem 0 1rem;
}

.form-header h4 {
    margin: 0;
    color: var(--text-primary);
}

.close-button {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
}

.close-button:hover {
    background: var(--surface-background);
    color: var(--text-primary);
}

.form-group {
    margin-bottom: 1rem;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
}

.form-control:focus {
    outline: none;
    border-color: var(--primary-color);
}

.content-textarea {
    resize: vertical;
    min-height: 80px;
    font-family: inherit;
}

.form-row {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

.visibility-selector,
.color-selector {
    flex: 1;
}

.visibility-selector label,
.color-selector label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-primary);
}

.color-options {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.color-option {
    width: 24px;
    height: 24px;
    border: 2px solid transparent;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
}

.color-option:hover,
.color-option.active {
    border-color: var(--text-primary);
    transform: scale(1.1);
}

.form-actions {
    display: flex;
    gap: 0.75rem;
    padding: 1rem;
    border-top: 1px solid var(--border-color);
}

.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-primary {
    background: var(--primary-color);
    color: white;
}

.btn-primary:hover:not(:disabled) {
    background: var(--primary-color-dark);
}

.btn-primary:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.btn-secondary {
    background: var(--surface-background);
    color: var(--text-secondary);
    border: 1px solid var(--border-color);
}

.btn-secondary:hover {
    background: var(--border-color);
    color: var(--text-primary);
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
}

.btn-outline-primary {
    background: none;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
}

.btn-outline-primary:hover {
    background: var(--primary-color);
    color: white;
}

/* Basic styles only */
.notes-panel { display: flex; flex-direction: column; height: 100%; }
.notes-header { padding: 1rem; }
.notes-list { flex: 1; overflow-y: auto; }
.note-card { margin: 0.5rem; padding: 1rem; border: 1px solid #ccc; }
</style>