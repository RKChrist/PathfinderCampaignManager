@using PathfinderCampaignManager.Presentation.Client.Services
@using PathfinderCampaignManager.Presentation.Client.Store.Auth
@using Fluxor
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IState<AuthState> AuthState
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (_isAuthenticated && _currentUser != null)
{
    <div class="dropdown user-profile-menu">
        <button class="btn btn-link dropdown-toggle user-profile-btn" type="button" id="userMenuDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <div class="d-flex align-items-center">
                <div class="user-avatar me-2">
                    <i class="fas fa-user-circle"></i>
                </div>
                <div class="user-info d-none d-md-block">
                    <div class="user-name">@_currentUser.DisplayName</div>
                    <div class="user-role">@_currentUser.Role</div>
                </div>
            </div>
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenuDropdown">
            <li><h6 class="dropdown-header">@_currentUser.DisplayName</h6></li>
            <li><small class="dropdown-item-text text-muted">@_currentUser.Email</small></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="/profile"><i class="fas fa-user me-2"></i>Profile</a></li>
            <li><a class="dropdown-item" href="/settings"><i class="fas fa-cog me-2"></i>Settings</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><button class="dropdown-item" @onclick="HandleLogout"><i class="fas fa-sign-out-alt me-2"></i>Sign Out</button></li>
        </ul>
    </div>
}
else if (!_isLoading)
{
    <div class="auth-buttons">
        <a href="/login" class="btn btn-outline-primary me-2">
            <i class="fas fa-sign-in-alt me-1"></i>
            Sign In
        </a>
        <a href="/register" class="btn btn-primary">
            <i class="fas fa-user-plus me-1"></i>
            Register
        </a>
    </div>
}

<style>
    .user-profile-menu .user-profile-btn {
        border: none;
        padding: 0.5rem;
        color: var(--bs-dark, #212529);
        text-decoration: none;
        background: transparent;
    }

    .user-profile-menu .user-profile-btn:hover,
    .user-profile-menu .user-profile-btn:focus {
        background: rgba(0,0,0,0.05);
        color: var(--bs-dark, #212529);
        text-decoration: none;
    }

    .user-avatar {
        font-size: 1.5rem;
        color: var(--bs-primary, #0d6efd);
    }

    .user-info {
        text-align: left;
        line-height: 1.2;
    }

    .user-name {
        font-weight: 600;
        font-size: 0.875rem;
    }

    .user-role {
        font-size: 0.75rem;
        color: var(--bs-secondary, #6c757d);
        text-transform: capitalize;
    }

    .auth-buttons .btn {
        font-size: 0.875rem;
        padding: 0.375rem 0.75rem;
    }

    .dropdown-menu {
        min-width: 200px;
    }

    .dropdown-item i {
        width: 16px;
        text-align: center;
    }
</style>

@code {
    private bool _isLoading = true;
    private bool _isAuthenticated = false;
    private UserInfo? _currentUser = null;

    protected override async Task OnInitializedAsync()
    {
        AuthState.StateChanged += OnAuthStateChanged;
        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            _isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (_isAuthenticated)
            {
                _currentUser = await AuthService.GetCurrentUserAsync();
            }
        }
        catch (Exception)
        {
            _isAuthenticated = false;
            _currentUser = null;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async void OnAuthStateChanged(object sender, EventArgs e)
    {
        await LoadUserInfo();
    }

    private async Task HandleLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            // Handle logout error
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Bootstrap dropdown functionality
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (typeof bootstrap !== 'undefined' && bootstrap.Dropdown) {
                    var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
                    var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                        return new bootstrap.Dropdown(dropdownToggleEl);
                    });
                }
            ");
        }
    }

    public void Dispose()
    {
        AuthState.StateChanged -= OnAuthStateChanged;
    }
}