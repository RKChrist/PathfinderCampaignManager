@using PathfinderCampaignManager.Domain.Entities.Combat
@using PathfinderCampaignManager.Presentation.Shared.Models

@if (IsVisible && Character != null)
{
    <div class="modal fade show character-sheet-modal" style="display: block;" @onclick="@(() => IsVisible = false)">
        <div class="modal-dialog modal-xl modal-dialog-scrollable" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="character-header">
                        <h4 class="modal-title">
                            @Character.Name
                            @if (!string.IsNullOrEmpty(Character.Ancestry))
                            {
                                <small class="text-muted">@Character.Ancestry @Character.Class</small>
                            }
                        </h4>
                        @if (Character.Level > 0)
                        {
                            <div class="character-level">Level @Character.Level</div>
                        }
                    </div>
                    <button type="button" class="btn-close" @onclick="@(() => IsVisible = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="character-sheet-container">
                        <!-- Combat Stats -->
                        <div class="stat-section">
                            <h5>Combat Statistics</h5>
                            <div class="stat-grid">
                                <div class="stat-block">
                                    <label>Hit Points</label>
                                    <div class="stat-value large">
                                        <span class="current-hp @GetHPStatusClass()">@Character.CurrentHitPoints</span>
                                        <span class="hp-separator">/</span>
                                        <span class="max-hp">@Character.HitPoints</span>
                                    </div>
                                </div>
                                <div class="stat-block">
                                    <label>Armor Class</label>
                                    <div class="stat-value large">@Character.ArmorClass</div>
                                </div>
                                <div class="stat-block">
                                    <label>Initiative</label>
                                    <div class="stat-value">@FormatModifier(Character.InitiativeModifier)</div>
                                </div>
                                <div class="stat-block">
                                    <label>Speed</label>
                                    <div class="stat-value">30 ft</div>
                                </div>
                            </div>
                        </div>

                        <!-- Ability Scores -->
                        @if (DetailedCharacter?.AbilityScores?.Any() == true)
                        {
                            <div class="stat-section">
                                <h5>Ability Scores</h5>
                                <div class="ability-grid">
                                    @foreach (var ability in DetailedCharacter.AbilityScores)
                                    {
                                        <div class="ability-block">
                                            <div class="ability-name">@ability.Key</div>
                                            <div class="ability-score">@ability.Value</div>
                                            <div class="ability-modifier">@FormatModifier(CalculateModifier(ability.Value))</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Saving Throws -->
                        <div class="stat-section">
                            <h5>Saving Throws</h5>
                            <div class="save-grid">
                                <div class="save-block fortitude">
                                    <label>Fortitude</label>
                                    <div class="save-value">@FormatModifier(Character.FortitudeSave)</div>
                                </div>
                                <div class="save-block reflex">
                                    <label>Reflex</label>
                                    <div class="save-value">@FormatModifier(Character.ReflexSave)</div>
                                </div>
                                <div class="save-block will">
                                    <label>Will</label>
                                    <div class="save-value">@FormatModifier(Character.WillSave)</div>
                                </div>
                            </div>
                        </div>

                        <!-- Skills -->
                        @if (DetailedCharacter?.Skills?.Any() == true)
                        {
                            <div class="stat-section">
                                <h5>Skills</h5>
                                <div class="skills-grid">
                                    @foreach (var skill in DetailedCharacter.Skills.OrderBy(s => s.Key))
                                    {
                                        <div class="skill-item">
                                            <span class="skill-name">@skill.Key</span>
                                            <span class="skill-proficiency @GetProficiencyClass(skill.Value)">
                                                @skill.Value
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Feats -->
                        @if (DetailedCharacter?.Feats?.Any() == true)
                        {
                            <div class="stat-section">
                                <h5>Feats</h5>
                                <div class="feats-container">
                                    @foreach (var feat in DetailedCharacter.Feats)
                                    {
                                        <div class="feat-item" 
                                             @onmouseenter="@(() => ShowFeatTooltip(feat))"
                                             @onmouseleave="HideTooltip">
                                            <span class="feat-name">@feat</span>
                                            <i class="fas fa-info-circle feat-info"></i>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Equipment -->
                        @if (DetailedCharacter?.Equipment?.Any() == true)
                        {
                            <div class="stat-section">
                                <h5>Equipment</h5>
                                <div class="equipment-container">
                                    @foreach (var item in DetailedCharacter.Equipment)
                                    {
                                        <div class="equipment-item"
                                             @onmouseenter="@(() => ShowEquipmentTooltip(item))"
                                             @onmouseleave="HideTooltip">
                                            <i class="fas fa-sword equipment-icon"></i>
                                            <span class="equipment-name">@item</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Conditions (if any) -->
                        @if (Character.Conditions?.Any() == true)
                        {
                            <div class="stat-section">
                                <h5>Current Conditions</h5>
                                <div class="conditions-container">
                                    @foreach (var condition in Character.Conditions)
                                    {
                                        <div class="condition-badge active"
                                             @onmouseenter="@(() => ShowConditionTooltip(condition))"
                                             @onmouseleave="HideTooltip">
                                            @condition
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Notes -->
                        @if (!string.IsNullOrEmpty(Character.Notes))
                        {
                            <div class="stat-section">
                                <h5>Notes</h5>
                                <div class="notes-content">
                                    @Character.Notes
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => IsVisible = false)">
                        Close
                    </button>
                    @if (IsPlayerCharacter || IsDM)
                    {
                        <button type="button" class="btn btn-primary" @onclick="EditCharacter">
                            <i class="fas fa-edit"></i> Edit Character
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <!-- Tooltip -->
    @if (_showTooltip)
    {
        <div class="tooltip-container" style="@GetTooltipStyle()">
            <div class="tooltip-content">
                @if (!string.IsNullOrEmpty(_tooltipTitle))
                {
                    <div class="tooltip-title">@_tooltipTitle</div>
                }
                <div class="tooltip-body">@_tooltipContent</div>
            </div>
        </div>
    }
    
    <div class="modal-backdrop fade show"></div>
}

<style>
.character-sheet-modal .modal-dialog {
    max-width: 1200px;
}

.character-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex: 1;
}

.character-level {
    background: var(--primary-color);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    font-weight: 600;
}

.character-sheet-container {
    display: grid;
    gap: 1.5rem;
}

.stat-section {
    background: var(--surface-background);
    border-radius: 0.5rem;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
}

.stat-section h5 {
    margin: 0 0 1rem 0;
    color: var(--text-primary);
    font-weight: 600;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.5rem;
}

.stat-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
}

.stat-block {
    text-align: center;
    padding: 1rem;
    background: white;
    border-radius: 0.375rem;
    border: 1px solid var(--border-color);
}

.stat-block label {
    display: block;
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
}

.stat-value {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
}

.stat-value.large {
    font-size: 1.5rem;
}

.current-hp.healthy {
    color: var(--success-color);
}

.current-hp.wounded {
    color: var(--warning-color);
}

.current-hp.critical {
    color: var(--error-color);
}

.current-hp.unconscious {
    color: var(--text-secondary);
    text-decoration: line-through;
}

.ability-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 1rem;
}

.ability-block {
    text-align: center;
    padding: 1rem;
    background: white;
    border-radius: 0.375rem;
    border: 1px solid var(--border-color);
}

.ability-name {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
}

.ability-score {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.ability-modifier {
    font-size: 0.9rem;
    color: var(--text-secondary);
}

.save-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
}

.save-block {
    text-align: center;
    padding: 1rem;
    border-radius: 0.375rem;
    border: 2px solid;
}

.save-block.fortitude {
    background: var(--error-color-10);
    border-color: var(--error-color-20);
    color: var(--error-color);
}

.save-block.reflex {
    background: var(--success-color-10);
    border-color: var(--success-color-20);
    color: var(--success-color);
}

.save-block.will {
    background: var(--primary-color-10);
    border-color: var(--primary-color-20);
    color: var(--primary-color);
}

.save-block label {
    display: block;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
}

.save-value {
    font-size: 1.25rem;
    font-weight: 700;
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.5rem;
}

.skill-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0.75rem;
    background: white;
    border-radius: 0.25rem;
    border: 1px solid var(--border-color);
}

.skill-name {
    font-weight: 500;
    color: var(--text-primary);
}

.skill-proficiency {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.125rem 0.5rem;
    border-radius: 0.25rem;
    text-transform: uppercase;
}

.skill-proficiency.untrained {
    background: var(--text-secondary-20);
    color: var(--text-secondary);
}

.skill-proficiency.trained {
    background: var(--success-color-20);
    color: var(--success-color);
}

.skill-proficiency.expert {
    background: var(--primary-color-20);
    color: var(--primary-color);
}

.skill-proficiency.master, .skill-proficiency.legendary {
    background: var(--warning-color-20);
    color: var(--warning-color);
}

.feats-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
}

.feat-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--primary-color-10);
    border: 1px solid var(--primary-color-20);
    border-radius: 0.375rem;
    color: var(--primary-color);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.feat-item:hover {
    background: var(--primary-color-20);
}

.feat-info {
    font-size: 0.75rem;
    opacity: 0.7;
}

.equipment-container {
    display: grid;
    gap: 0.5rem;
}

.equipment-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0.75rem;
    background: white;
    border-radius: 0.25rem;
    border: 1px solid var(--border-color);
    cursor: pointer;
    transition: all 0.2s ease;
}

.equipment-item:hover {
    background: var(--surface-background);
}

.equipment-icon {
    color: var(--text-secondary);
    width: 16px;
}

.equipment-name {
    font-weight: 500;
    color: var(--text-primary);
}

.conditions-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.condition-badge {
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.condition-badge.active {
    background: var(--warning-color-20);
    color: var(--warning-color);
    border: 1px solid var(--warning-color);
}

.condition-badge:hover {
    transform: translateY(-1px);
}

.notes-content {
    padding: 1rem;
    background: white;
    border-radius: 0.375rem;
    border: 1px solid var(--border-color);
    white-space: pre-wrap;
    line-height: 1.5;
}

.tooltip-container {
    position: fixed;
    z-index: 10000;
    pointer-events: none;
}

.tooltip-content {
    background: var(--text-primary);
    color: white;
    padding: 0.75rem;
    border-radius: 0.375rem;
    max-width: 300px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.tooltip-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
    border-bottom: 1px solid rgba(255,255,255,0.2);
    padding-bottom: 0.25rem;
}

.tooltip-body {
    font-size: 0.875rem;
    line-height: 1.4;
}

@@media (max-width: 768px) {
    .character-sheet-modal .modal-dialog {
        max-width: 95vw;
        margin: 1rem auto;
    }
    
    .stat-grid,
    .ability-grid {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .save-grid {
        grid-template-columns: 1fr;
    }
    
    .skills-grid {
        grid-template-columns: 1fr;
    }
}
</style>