@using PathfinderCampaignManager.Domain.Validation

<div class="validation-report @GetContainerClass()">
    @if (Report != null)
    {
        <div class="validation-header">
            <div class="validation-status">
                <i class="fas @GetStatusIcon() me-2"></i>
                <h5 class="mb-0">
                    @if (Report.IsValid)
                    {
                        <span class="text-success">Valid</span>
                    }
                    else if (Report.HasCriticalIssues)
                    {
                        <span class="text-danger">Invalid</span>
                    }
                    else
                    {
                        <span class="text-warning">Warnings</span>
                    }
                </h5>
            </div>
            <small class="text-muted">
                @Report.ValidatedEntityType validated at @Report.ValidationTimestamp.ToString("HH:mm:ss")
            </small>
        </div>

        @if (Report.Issues.Any())
        {
            <div class="validation-section">
                <h6 class="validation-section-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Issues (@Report.Issues.Count)
                </h6>
                @foreach (var issue in Report.Issues.OrderByDescending(i => i.Severity))
                {
                    <div class="validation-item validation-issue @GetSeverityClass(issue.Severity)">
                        <div class="validation-item-header">
                            <span class="validation-category badge bg-secondary">@issue.Category</span>
                            <span class="validation-severity @GetSeverityClass(issue.Severity)">
                                <i class="fas @GetSeverityIcon(issue.Severity) me-1"></i>
                                @issue.Severity
                            </span>
                        </div>
                        <div class="validation-message">@issue.Message</div>
                        @if (!string.IsNullOrEmpty(issue.FixAction))
                        {
                            <div class="validation-fix">
                                <strong>Fix:</strong> @issue.FixAction
                            </div>
                        }
                    </div>
                }
            </div>
        }

        @if (Report.Warnings.Any())
        {
            <div class="validation-section">
                <h6 class="validation-section-title text-warning">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    Warnings (@Report.Warnings.Count)
                </h6>
                @foreach (var warning in Report.Warnings)
                {
                    <div class="validation-item validation-warning">
                        <div class="validation-item-header">
                            <span class="validation-category badge bg-warning">@warning.Category</span>
                        </div>
                        <div class="validation-message">@warning.Message</div>
                        @if (!string.IsNullOrEmpty(warning.Recommendation))
                        {
                            <div class="validation-recommendation">
                                <strong>Recommendation:</strong> @warning.Recommendation
                            </div>
                        }
                    </div>
                }
            </div>
        }

        @if (Report.Suggestions.Any())
        {
            <div class="validation-section">
                <h6 class="validation-section-title text-info">
                    <i class="fas fa-lightbulb me-2"></i>
                    Suggestions (@Report.Suggestions.Count)
                </h6>
                @foreach (var suggestion in Report.Suggestions)
                {
                    <div class="validation-item validation-suggestion">
                        <div class="validation-item-header">
                            <span class="validation-category badge bg-info">@suggestion.Category</span>
                        </div>
                        <div class="validation-message">@suggestion.Suggestion</div>
                        @if (!string.IsNullOrEmpty(suggestion.Benefit))
                        {
                            <div class="validation-benefit">
                                <strong>Benefit:</strong> @suggestion.Benefit
                            </div>
                        }
                    </div>
                }
            </div>
        }

        @if (!Report.Issues.Any() && !Report.Warnings.Any() && !Report.Suggestions.Any())
        {
            <div class="validation-empty">
                <i class="fas fa-check-circle text-success fa-2x mb-2"></i>
                <p class="mb-0">No validation issues found. Everything looks good!</p>
            </div>
        }
    }
    else
    {
        <div class="validation-empty">
            <i class="fas fa-question-circle text-muted fa-2x mb-2"></i>
            <p class="mb-0">No validation report available.</p>
        </div>
    }
</div>

<style>
.validation-report {
    border: 1px solid var(--bs-border-color);
    border-radius: 8px;
    background: white;
    overflow: hidden;
}

.validation-report.valid {
    border-color: var(--bs-success);
}

.validation-report.invalid {
    border-color: var(--bs-danger);
}

.validation-report.warnings {
    border-color: var(--bs-warning);
}

.validation-header {
    padding: 16px;
    background: var(--bs-light);
    border-bottom: 1px solid var(--bs-border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.validation-status {
    display: flex;
    align-items: center;
}

.validation-section {
    padding: 16px;
    border-bottom: 1px solid var(--bs-border-color-translucent);
}

.validation-section:last-child {
    border-bottom: none;
}

.validation-section-title {
    margin-bottom: 12px;
    font-weight: 600;
    display: flex;
    align-items: center;
}

.validation-item {
    margin-bottom: 12px;
    padding: 12px;
    border-radius: 6px;
    border-left: 4px solid transparent;
}

.validation-item:last-child {
    margin-bottom: 0;
}

.validation-issue {
    background: rgba(220, 53, 69, 0.1);
    border-left-color: var(--bs-danger);
}

.validation-issue.error {
    background: rgba(220, 53, 69, 0.15);
}

.validation-issue.warning {
    background: rgba(255, 193, 7, 0.1);
    border-left-color: var(--bs-warning);
}

.validation-warning {
    background: rgba(255, 193, 7, 0.1);
    border-left-color: var(--bs-warning);
}

.validation-suggestion {
    background: rgba(13, 202, 240, 0.1);
    border-left-color: var(--bs-info);
}

.validation-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.validation-category {
    font-size: 0.75rem;
}

.validation-severity {
    font-size: 0.8rem;
    font-weight: 500;
}

.validation-severity.error {
    color: var(--bs-danger);
}

.validation-severity.warning {
    color: var(--bs-warning);
}

.validation-message {
    font-weight: 500;
    margin-bottom: 4px;
}

.validation-fix,
.validation-recommendation,
.validation-benefit {
    font-size: 0.875rem;
    color: var(--bs-secondary);
    margin-top: 8px;
}

.validation-empty {
    padding: 32px;
    text-align: center;
    color: var(--bs-secondary);
}

/* Compact mode */
.validation-report.compact {
    font-size: 0.875rem;
}

.validation-report.compact .validation-header {
    padding: 12px;
}

.validation-report.compact .validation-section {
    padding: 12px;
}

.validation-report.compact .validation-item {
    padding: 8px;
    margin-bottom: 8px;
}

.validation-report.compact .validation-empty {
    padding: 24px;
}
</style>